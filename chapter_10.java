public class chapter_10 {
    //Что насчет автоматизации?

    //Так как не только мы любим забегать вперед, но и некоторые обучающиеся тестированию,
    //то давай сразу поговорим и на тему автоматизации.

    //Условия на рынке труда предъявляют все более высокие требования к тестировщикам.

    //Сейчас для работодателя предпочтительным QA-джуном является тот специалист,
    //который разбирается в автоматизации, пусть и не на самом глубоком уровне.
    //К этому приводит продолжающееся усложнение программного обеспечения,
    //когда все меньше функциональности удается протестировать "руками".

    //Поэтому новичку с хорошим знанием ручного тестирования
    //и навыками автоматизации работу найти проще, чем без оных.

    //Исходя из этого, некоторые делают логичный вывод,
    //что изучение тестирования нужно начинать с одновременным изучением автоматизации.

    //•Почему новичку НЕ нужна автоматизация

    //•Кому можно сразу в автоматизацию

    //•Где ждут мануальщика

    //•Как начинать изучать автоматизацию


    //Почему новичку НЕ нужна автоматизация

    //Изучение тест-дизайна и базиса информационных технологий в виде принципов работы баз данных, серверов,
    //сетевых и пользовательских интерфейсов требует не меньше 200 часов теории и практики.
    //При средней нагрузке 15 часов в неделю на это уйдет не меньше 4–5 месяцев.

    //Погружение в основы языка программирования, изучение подходов автоматизации и получение навыков
    //в работе с несколькими фреймворками займет еще примерно столько же.

    //При этом, как мы говорили раньше, во время обучения продолжительностью более полугода только
    //что полученные и не трансформированные в практические навыки знания начинают улетучиваться.

    //Специалист, который учился одновременно и ручному тестированию, и автоматизированному,
    //обычно и плохо тестирует вручную, и плохо автоматизирует.
    //Примером этого могут служить разработчики, переходящие в тестирование (да, такое тоже бывает).
    //Они не испытывают никаких проблем с написанием кода,
    //но способны работать только по уже готовым тест-кейсам,
    //которые для них сделали ручные тестировщики.


    //Кому можно сразу в автоматизацию

    //Как и у любого правила, у утверждения "не учи автоматизацию сразу" есть исключения.
    //Если в карточках главы "Учиться самостоятельно или на курсе?"
    //ты набрал больше 10 баллов (Набрал) и уже имеешь некоторый опыт программирования,
    //то можешь попробовать взять сразу две вершины.


    //Где ждут мануальщика

    //На самом деле все не так сложно. Действительно, найти работу, зная основы автоматизации, проще.
    //Но это не значит, что без знания автоматизации найти работу очень сложно.

    //Дело в том, что существуют компании, где автоматизированные тестировщики не нужны вообще.
    //Или же нужны в небольшом количестве по сравнению с числом мануальных тестировщиков.

    //Стартапы

    //Стартапам пока нет смысла что-либо автоматизировать.
    //На первичных стадиях развития продукта его концепция может меняться по нескольку раз.
    //По истечении года код приложения может быть переписан полностью с нуля.

    //В таких условиях заниматься сразу автоматизацией — это однозначно выбрасывать деньги на ветер.
    //Работа мануального тестировщика получается гораздо выгоднее для компании.


    //Небольшие компании без значительных бюджетов

    //Автоматизированные тестировщики стоят дорого.
    //Есть большое число компаний, которые не могут себе их позволить.
    //Повторимся, что для новичка самое главное — ориентироваться на получение опыта,
    //а не на получение максимально возможной зарплаты сразу же по окончанию обучения.
    //Если будет хороший опыт, то появится и хорошая зарплата.


    //Специфическое ПО

    //В природе не существует проекта, на котором 100%
    //необходимого тестового покрытия было бы автоматизировано.
    //Автоматизировать всё подряд — как раз подход малоопытных начинающих автоматизаторов,
    //"у которых в руках молоток и им везде мерещатся гвозди".

    //Существуют проекты, на которых сложно автоматизировать и значительную часть функциональности.
    //Это могут быть проекты:
    //работающие со специфической аппаратной частью.
    //Например, с промышленными датчиками или медицинским оборудованием;

    //с очень быстро меняющейся функциональностью (не всегда это происходит только в стартапах);

    //требующие много специфического тестирования;
    //например, исследовательского тестирования, тестирования usability,
    //сложного UX, deprecated legacy-кода (выходящего из употребления, но все еще используемого кода).


    //Как начинать изучать автоматизацию

    //Прошло полгода работы мануальным тестировщиком на первом месте,
    //ты освоился со своими обязанности и настало время двигаться дальше.

    //К этому времени ты уже должен научиться применять на практике:
    //принципы и концепции тестирования;

    //техники тест-дизайна (классы эквивалентности, граничные значения и т.д.);

    //знания по тестированию API, работе с HTML, XML, JSON;

    //знания SQL;

    //знания Linux, умение работать в командной строке.


    //К этому тебе нужно начать добавлять:
    //начальные навыки в программировании, знание и понимание базовых принципов ООП;

    //опыт работы с IDE (например, Eclipse/Idea);

    //основы Git.


    //Какой язык учить?
    //Для автоматизации в большинстве случаев используют Python или Java.
    //Какой именно язык учить, не принципиально по ряду причин:
    //Изучив один язык, другой быстро осваивается по аналогии.
    //Спрос на тот или иной язык в вакансиях может "плавать",
    //но зачастую пишущие на более редких языках специалисты получают больше —
    //старый код тоже надо поддерживать.
    //Можешь попробовать начать писать на нескольких языках, чтобы дальше использовать тот,
    //который показался более удобным.


    //Как учиться?

    //Идеальный вариант — если в твоей первой компании есть и ручное,
    // и автоматизированное тестирование, причем последнее автоматизировано грамотно.
    //Есть опытный QA-специалист уровня сеньор, который следит за использованием правильной архитектуры,
    //подходов и паттернов, который осуществляет ревью кода.
    //В этом случае ты можешь начать с поддержки уже существующего кода,
    //заодно обучаясь правильным подходам.



}
